"""Create a 64-bit environment-unique sequence ID from file_id and seq_id"""

# tests > test_pointid.py

# %% imports
import math
import unittest
from typing import Tuple

# %%
def create_point_id(file_id: int, seq_id: int) -> int:
    """
    Create a 64 bit integer, consisting of the file id and sequence id.

    Note! This id may change during processing, and should not be utilised
    outside of the system. Each data unit has a sequence id, which is only
    unique within the data unit file. Therefore, the sequence id is combined 
    with the file id to create a sequence id that is unique 
    across all sequences in the environment. It is used by the system
    for sequence management (e.g. filtering records for a selection of 
    sequences by the user), but if required, could be any other numeric value 
    providing it is unique.

    Parameters
    ----------
    file_id : int
        The data unit file id, usually generated during pre-processing.
        Maximum 65,535 (16-bit unsigned).
        
    seq_id : int
        The sequence id from the data unit.
        Maximum 281,474,976,710,655 (48-bit unsigned).

    Returns
    -------
    int
        The 64-bit integer ID; file_id (upper bits) seq_id (lower bits)

    Raises
    ------
    Exception
        If either the file_id or seq_id parameters exceed their
        maximum allowed values.
    """

    
    # Init
    MAX_FILE_ID = 0xFFFF # 16 bit unsigned, max 65,535
    MAX_SEQ_ID = 0xFFFFFFFFFFFF # 48 bit unsigned, max 281,474,976,710,655
    seq_id_num_bits = round(math.log2(MAX_SEQ_ID))
    
    
    # Check within range
    if file_id > MAX_FILE_ID:
        raise Exception(f'Max allowed file_id is {MAX_FILE_ID}')
    elif seq_id > MAX_SEQ_ID:
        raise Exception(f'Max allowed seq_id is {MAX_SEQ_ID}')
    elif file_id < 0:
        raise Exception('file_id cannot be negative')
    elif seq_id < 0:
        raise Exception('seq_id cannot be negative')

    
    # Shift file_id number by bits in seq_id
    return (file_id << seq_id_num_bits) | seq_id


# %%
def invert_point_id(point_id: int) -> Tuple[int, int]:
    """
    Inverts the point_id and returns the original file_id and seq_id

    See also create_point_id() for further information.

    Parameters
    ----------
    point_id : int
        The point id generated by create_point_id().

    Returns
    -------
    Tuple[int, int]
        The original file_id and seq_id.
    """
    
    MAX_FILE_ID = 0xFFFF
    MAX_SEQ_ID = 0xFFFFFFFFFFFF
    seq_id_num_bits = round(math.log2(MAX_SEQ_ID))

    # Lower bits
    seq_id = point_id & MAX_SEQ_ID

    # Upper bits, shift across
    file_id = (point_id >> seq_id_num_bits) & MAX_FILE_ID

    return file_id, seq_id



